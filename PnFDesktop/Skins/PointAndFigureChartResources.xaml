<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:PnFDesktop.Controls"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime"
                    xmlns:local="clr-namespace:PnFDesktop.Classes">
    <BooleanToVisibilityConverter x:Key="BoolToVis" />
    <local:StringToVisibilityConverter x:Key="StringToVisibility"/>
    <SolidColorBrush
        x:Key="selectionBorderColor"
        Color="Blue"
    />

    <SolidColorBrush
        x:Key="selectionBorderBackgroundColor"
        Color="Blue"
        Opacity="0.25"
    />


    <!-- Default style and control-template for 'NodeItem'. -->
    <Style TargetType="{x:Type controls:PointAndFigureColumnItem}" >

        <!-- Data-bind the parent NetworkView. -->
        <Setter
            Property="ParentPointAndFigureChart"
            Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PointAndFigureChartControl}}, Path=.}"
            />

        <!-- Set the position of the node within the canvas. -->
        <Setter
            Property="Canvas.Left"
            Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}"
            />
        <Setter
            Property="Canvas.Top"
            Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}"
            />

        <!-- Set the z-order of the node within the canvas. -->
        <Setter Property="Canvas.ZIndex" Value="{Binding ZIndex, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>

        <!-- Set defaults for background and border. -->
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <!-- The control-template for the node. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PointAndFigureColumnItem}" >
                    <!-- 
                        This border indicates that node is selected.
                        Normally it is transparent, but when 'IsSelected' is set
                        to 'true' the border brush becomes blue and its background
                        becomds light blue.
                        -->
                    <Border
                            x:Name="selectionBorder"
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="{TemplateBinding Margin}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="0">
                        <Border.RenderTransform>
                            <TranslateTransform X="{Binding X}" 
                                                    Y="{Binding Y}"/>
                        </Border.RenderTransform>
                        <Canvas>
                            <!-- 
                            User-defined node content is presented here. 
                            -->
                            <ContentPresenter />
                            <!-- The visual for the bullish support box. -->
                            <Grid Visibility="{Binding ShowBullishSupportImage, Converter={StaticResource BoolToVis}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="{Binding GridSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PointAndFigureChartControl}}}"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="{Binding GridSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PointAndFigureChartControl}}}"/>
                                </Grid.RowDefinitions>
                                <!-- The names are added to the transforms below to prevent error appearing in the output window -->
                                <Grid.RenderTransform>
                                    <TranslateTransform Y="{Binding BullishSupportY}"/>
                                </Grid.RenderTransform>
                                <Image Source="{Binding BullishSupportImage}"  Stretch="None"/>
                            </Grid>
                        </Canvas>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"  Value="True">

                            <!-- When the node is selected, set the color of 'selectionBorder' to blue. -->
                            <!--<Setter
                                TargetName="selectionBorder"
                                Property="BorderBrush"
                                Value="{StaticResource selectionBorderColor}"
                                />-->
                        </Trigger>

                        <Trigger 
                            Property="IsSelected"
                            Value="True"
                            >

                            <!-- When the node is selected, set the background of 'selectionBorder' to light blue. -->
                            <Setter
                                TargetName="selectionBorder"
                                Property="Background"
                                Value="{StaticResource selectionBorderBackgroundColor}"
                                />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 
            Define the visual style for a 'PointAndFigureBoxItem'.
            -->
    <Style TargetType="{x:Type controls:PointAndFigureBoxItem}" >
        <!-- Data-bind the parent NetworkView. -->
        <Setter
            Property="ParentPointAndFigureChart"
            Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PointAndFigureChartControl}}, Path=.}"
        />

        <!--Data-bind the parent NodeItem.-->
        <Setter
            Property="ParentPointAndFigureColumnItem"
            Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PointAndFigureColumnItem}}, Path=.}"
        />

        <!--Set the position of the node within the canvas.-->
        <Setter
            Property="Canvas.Left"
            Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}"
        />
        <Setter
            Property="Canvas.Top"
            Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}"
        />

        <!-- The control-template for the connector. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                    TargetType="{x:Type controls:PointAndFigureBoxItem}"
                >
                    <!-- The visual for the box. -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding GridSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PointAndFigureChartControl}}}"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{Binding GridSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:PointAndFigureChartControl}}}"/>
                        </Grid.RowDefinitions>
                        <!-- The names are added to the transforms below to prevent error appearing in the output window -->
                        <Grid.RenderTransform>
                            <TranslateTransform X="{Binding X}" 
                                                Y="{Binding Y}"/>
                        </Grid.RenderTransform>
                        <Image Source="{Binding Image}"  Stretch="None"
                               Visibility="{Binding Box.MonthIndicator, Converter={StaticResource StringToVisibility}, ConverterParameter={x:Static Visibility.Collapsed}}"/>
                        <TextBlock Text="{Binding Box.MonthIndicator}" FontSize="6" FontWeight="Light" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                   Visibility="{Binding Box.MonthIndicator, Converter={StaticResource StringToVisibility}, ConverterParameter={x:Static Visibility.Visible}}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for the port Items list -->
    <Style x:Key="BoxItemsList" TargetType="{x:Type ItemsControl}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Canvas Height="{Binding Size.Height}"
                            Width="{Binding Size.Width}"
                            IsItemsHost="True"></Canvas>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- 
    Override the style of the ListBox to remove the ScrollViewer.
    All we want is ListBox logic but based on a Canvas.
    -->
    <Style x:Key="noScrollViewerListBoxStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <!-- 
                    The ListBoxItems are presented in a Canvas.
                    'IsItemsHost' is set to 'True' so that the ListBox
                    uses the Canvas as the container for its items.
                    -->
                    <Canvas 
                        IsItemsHost="True" 
                    />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 
    Override the style of the ListBox to remove the ScrollViewer.
    All we want is ListBox logic but based on a Canvas.
    -->
    <Style x:Key="ColumnListStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <!-- 
                    The ListBoxItems are presented in a Canvas.
                    'IsItemsHost' is set to 'True' so that the ListBox
                    uses the Canvas as the container for its items.
                    -->
                    <Canvas IsItemsHost="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default style and visual template for 'NetworkView'. -->
    <Style TargetType="{x:Type controls:PointAndFigureChartControl}" >

        <!-- The visual template. -->
        <Setter 
            Property="Template"
            >
            <Setter.Value>
                <ControlTemplate 
                    TargetType="{x:Type controls:PointAndFigureChartControl}"
                    >
                    <Border 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        >
                        <Grid HorizontalAlignment="Left" VerticalAlignment="Top" >
                            <Grid.RenderTransform>
                                <TranslateTransform X="{Binding LeftPadding}" 
                                                    Y="{Binding TopPadding}"/>
                            </Grid.RenderTransform>

                            <!-- Control that presents the nodes. -->
                            <controls:PointAndFigureColumnItemsControl
                                x:Name="PART_ColumnItemsControl"
                                ItemsSource="{TemplateBinding Columns}"
                                SelectionMode="Extended"
                                Style="{StaticResource ColumnListStyle}"
                                ItemTemplate="{TemplateBinding ColumnItemTemplate}"
                                ItemTemplateSelector="{TemplateBinding ColumnItemTemplateSelector}"
                                ItemContainerStyle="{TemplateBinding ColumnItemContainerStyle}"
                                />

                            <!-- Control that presents the Annotations. -->
                            <!--<local:AnnotationItemsControl
                                x:Name="PART_AnnotationItemsControl"
                                ItemsSource="{TemplateBinding Annotations}"
                                SelectionMode="Extended"
                                Style="{StaticResource noScrollViewerListBoxStyle}"
                                ItemTemplate="{TemplateBinding AnnotationItemTemplate}"
                                ItemTemplateSelector="{TemplateBinding AnnotationItemTemplateSelector}"
                                ItemContainerStyle="{TemplateBinding AnnotationItemContainerStyle}"
                                />-->

                            <!--
                            This Canvas and Border are used as a very simple way to render a drag selection rectangle.
                            -->
                            <Canvas
                                x:Name="PART_DragSelectionCanvas"
                                Visibility="Collapsed"
                                >
                                <Border 
                                    x:Name="PART_DragSelectionBorder"
                                    BorderBrush="Blue"
                                    BorderThickness="1"
                                    Background="LightBlue"
                                    CornerRadius="1"
                                    Opacity="0.5"
                                    />
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    Default style and template for the ZoomAndPanControl.
    -->
    <Style TargetType="{x:Type controls:ZoomAndPanControl}" >

        <Setter 
            Property="Template"
            >
            <Setter.Value>

                <ControlTemplate 
                    TargetType="{x:Type controls:ZoomAndPanControl}"
                    >

                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        >

                        <!-- 
                        The ContentPresenter is used to scale and offset the content of ZoomAndPanControl.
                    
                        A transforms computed from 'ContentScale', 'ContentOffsetX' and 'ContentOffsetY' are assigned 
                        to the 'RenderTransform' property in OnApplyTemplate in ZoomAndPanControl.cs.
                        
                        The alignment is set to top-left.  This allows the content offset to be used to place
                        the content in the center of the viewport when the viewport is bigger than the content.
                        -->
                        <ContentPresenter 
							x:Name="PART_Content"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            />

                    </Border>

                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>




</ResourceDictionary>