<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:PnFDesktop.Controls"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime"
                    xmlns:local="clr-namespace:PnFDesktop.Classes">
    <BooleanToVisibilityConverter x:Key="BoolToVis" />
    <local:StringToVisibilityConverter x:Key="StringToVisibility"/>
    <SolidColorBrush
        x:Key="selectionBorderColor"
        Color="Blue"
    />

    <SolidColorBrush
        x:Key="selectionBorderBackgroundColor"
        Color="Blue"
        Opacity="0.25"
    />

    <!-- 
    Override the style of the ListBox to remove the ScrollViewer.
    All we want is ListBox logic but based on a Canvas.
    -->
    <Style x:Key="ColumnListStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <!-- 
                    The ListBoxItems are presented in a Canvas.
                    'IsItemsHost' is set to 'True' so that the ListBox
                    uses the Canvas as the container for its items.
                    -->
                    <Canvas IsItemsHost="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Style for the port Items list -->
    <Style x:Key="CanvasHostedItemsList" TargetType="{x:Type ItemsControl}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Canvas IsItemsHost="True"></Canvas>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Default style and control-template for 'ColumnItem'. -->
    <Style TargetType="{x:Type controls:PointAndFigureColumnItem}" >
        <Setter Property="Canvas.Left" Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
        <Setter Property="Canvas.Top" Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
        <!-- The control-template for the column. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PointAndFigureColumnItem}" >
                    <Grid HorizontalAlignment="Left" VerticalAlignment="Top" ToolTip="{Binding Tooltip}">
                        <Grid.RenderTransform>
                            <TranslateTransform X="{Binding X}" 
                                                    Y="{Binding Y}" />
                        </Grid.RenderTransform>

                        <!-- Boxes list box -->
                        <ItemsControl ItemsSource="{Binding Boxes}"
                                          Style="{StaticResource CanvasHostedItemsList}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <!--The visual for the box.-->
                                    <Grid HorizontalAlignment="Left" VerticalAlignment="Top" 
                                              Height="5" Width="5">
                                        <Grid.RenderTransform>
                                            <TranslateTransform X="{Binding X}" 
                                                                    Y="{Binding Y}"/>
                                        </Grid.RenderTransform>
                                        <!--The names are added to the transforms below to prevent error appearing in the output window-->
                                        <Image Source="{Binding Image}"  Stretch="None"
                                                    Visibility="{Binding Box.MonthIndicator, Converter={StaticResource StringToVisibility}, ConverterParameter={x:Static Visibility.Collapsed}}">
                                            <Image.RenderTransform>
                                                <TranslateTransform X="0" Y="0" />
                                            </Image.RenderTransform>
                                        </Image>
                                        <TextBlock Text="{Binding Box.MonthIndicator}" FontSize="6" FontWeight="Light" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                                    Visibility="{Binding Box.MonthIndicator, Converter={StaticResource StringToVisibility}, ConverterParameter={x:Static Visibility.Visible}}">
                                            <TextBlock.RenderTransform>
                                                <TranslateTransform X="0" Y="0" />
                                            </TextBlock.RenderTransform>
                                        </TextBlock>
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>

                        <!-- The visual for the bullish support box. -->
                        <Image Source="{Binding BullishSupportImage}"  Stretch="None"
                                       Visibility="{Binding ShowBullishSupportImage, Converter={StaticResource BoolToVis}}">
                            <Image.RenderTransform>
                                <TranslateTransform Y="{Binding BullishSupportY}"/>
                            </Image.RenderTransform>
                        </Image>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Define the visual style for a 'PointAndFigureHighlight used to pick out rows'. -->
    <Style x:Key="HorizontalHighlightStyle" TargetType="{x:Type controls:PointAndFigureHighlightItem}" >

        <!--Set the position of the node within the canvas.-->
        <Setter Property="Canvas.Left" Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
        <Setter Property="Canvas.Top" Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>

        <!-- The control-template for the connector. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                    TargetType="{x:Type controls:PointAndFigureHighlightItem}"
                >
                    <Canvas HorizontalAlignment="Left" VerticalAlignment="Top">
                        <Canvas.RenderTransform>
                            <TranslateTransform X="{Binding X}" 
                                                Y="{Binding Y}"/>
                        </Canvas.RenderTransform>
                        <Rectangle Height="{Binding Height}" Width="{Binding Width}" StrokeThickness="0" 
                                Fill="#FFC3F6F6" Opacity="0.6">
                        </Rectangle>
                    </Canvas>
                    <!-- The visual for the box. -->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Define the visual style for a 'PointAndFigureHighlight used to pick out columns'. -->
    <Style x:Key="VerticalHighlightStyle" TargetType="{x:Type controls:PointAndFigureHighlightItem}" >

        <!--Set the position of the node within the canvas.-->
        <Setter Property="Canvas.Left" Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
        <Setter Property="Canvas.Top" Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>

        <!-- The control-template for the connector. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                    TargetType="{x:Type controls:PointAndFigureHighlightItem}"
                >
                    <Canvas>
                        <Canvas.RenderTransform>
                            <TranslateTransform X="{Binding X}" 
                                                Y="{Binding Y}"/>
                        </Canvas.RenderTransform>
                        <Rectangle Height="{Binding Height}" Width="{Binding Width}" StrokeThickness="0"
                                Fill="#FFC3F6F6" Opacity="0.2">
                            <Rectangle.RenderTransform>
                                <TranslateTransform X="0" Y="0" />
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </Canvas>
                    <!-- The visual for the box. -->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="LeftAxisLabelStyle" TargetType="{x:Type controls:PointAndFigureAxisLabelItem}" >
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <!--Set the position of the node within the canvas.-->
        <Setter Property="Canvas.Left" Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
        <Setter Property="Canvas.Top" Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
        <!-- The control-template for the connector. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PointAndFigureAxisLabelItem}">
                    <Grid Width="25" Height="4">
                        <Grid.RenderTransform>
                            <TranslateTransform X="{Binding X}" Y="{Binding Y}"/>
                        </Grid.RenderTransform>
                        <TextBlock Text="{Binding Text}" HorizontalAlignment="Right" VerticalAlignment="Center" FontSize="4"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightAxisLabelStyle" TargetType="{x:Type controls:PointAndFigureAxisLabelItem}" >

        <!--Set the position of the node within the canvas.-->
        <Setter Property="Canvas.Left" Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
        <Setter Property="Canvas.Top" Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>

        <!-- The control-template for the connector. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PointAndFigureAxisLabelItem}">
                    <Grid Width="25" Height="4">
                        <Grid.RenderTransform>
                            <TranslateTransform X="{Binding X}" Y="{Binding Y}"/>
                        </Grid.RenderTransform>
                        <TextBlock Text="{Binding Text}" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="4"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BottomAxisLabelStyle" TargetType="{x:Type controls:PointAndFigureAxisLabelItem}" >

        <!--Set the position of the node within the canvas.-->
        <Setter Property="Canvas.Left" Value="{Binding X, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
        <Setter Property="Canvas.Top" Value="{Binding Y, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>

        <!-- The control-template for the connector. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PointAndFigureAxisLabelItem}">
                    <Grid Width="4" Height="25" Focusable="False">
                        <Grid.RenderTransform>
                            <TranslateTransform X="{Binding X}" Y="{Binding Y}"/>
                        </Grid.RenderTransform>
                        <TextBlock Text="{Binding Text}" 
                                   TextWrapping="Wrap" 
                                   HorizontalAlignment="Center" 
                                   VerticalAlignment="Top" 
                                   FontSize="4"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- 
    Override the style of the ListBox to remove the ScrollViewer.
    All we want is ListBox logic but based on a Canvas.
    -->
    <Style x:Key="noScrollViewerListBoxStyle" TargetType="ListBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <!-- 
                    The ListBoxItems are presented in a Canvas.
                    'IsItemsHost' is set to 'True' so that the ListBox
                    uses the Canvas as the container for its items.
                    -->
                    <Canvas 
                        IsItemsHost="True" 
                    />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!-- Default style and visual template for 'PointAndFigureChartControl'. -->
    <Style TargetType="{x:Type controls:PointAndFigureChartControl}" >

        <!-- The visual template. -->
        <Setter 
            Property="Template"
            >
            <Setter.Value>
                <ControlTemplate 
                    TargetType="{x:Type controls:PointAndFigureChartControl}"
                    >
                    <Border 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        >
                        <Grid HorizontalAlignment="Left" VerticalAlignment="Top" >
                            <!-- Control that presents the RowBackgronds. -->
                            <controls:PointAndFigureHighlightItemsControl
                                ItemsSource="{TemplateBinding Highlights}"
                                Style="{StaticResource CanvasHostedItemsList}"
                                ItemTemplateSelector="{TemplateBinding HighlightItemTemplateSelector}"
                                Focusable="False"
                                />

                            <!-- Control that presents the Axis labels. -->
                            <controls:PointAndFigureAxisLabelItemsControl
                                x:Name="PART_AxisLabelItemsControl"
                                ItemsSource="{TemplateBinding AxisLabels}"
                                Style="{StaticResource CanvasHostedItemsList}"
                                ItemTemplateSelector="{TemplateBinding AxisLabelItemTemplateSelector}"
                                Focusable="False"
                                />

                            <!-- Control that presents the columns. -->
                            <controls:PointAndFigureColumnItemsControl
                                x:Name="PART_ColumnItemsControl"
                                ItemsSource="{TemplateBinding Columns}"
                                SelectionMode="Extended"
                                Style="{StaticResource ColumnListStyle}"
                                ItemTemplate="{TemplateBinding ColumnItemTemplate}"
                                Focusable="False"
                                />


                            <!--
                            This Canvas and Border are used as a very simple way to render a drag selection rectangle.
                            -->
                            <Canvas
                                x:Name="PART_DragSelectionCanvas"
                                Visibility="Collapsed"
                                >
                                <Border 
                                    x:Name="PART_DragSelectionBorder"
                                    BorderBrush="Blue"
                                    BorderThickness="1"
                                    Background="LightBlue"
                                    CornerRadius="1"
                                    Opacity="0.5"
                                    />
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    Default style and template for the ZoomAndPanControl.
    -->
    <Style TargetType="{x:Type controls:ZoomAndPanControl}" >

        <Setter 
            Property="Template"
            >
            <Setter.Value>

                <ControlTemplate 
                    TargetType="{x:Type controls:ZoomAndPanControl}"
                    >

                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        >

                        <!-- 
                        The ContentPresenter is used to scale and offset the content of ZoomAndPanControl.
                    
                        A transforms computed from 'ContentScale', 'ContentOffsetX' and 'ContentOffsetY' are assigned 
                        to the 'RenderTransform' property in OnApplyTemplate in ZoomAndPanControl.cs.
                        
                        The alignment is set to top-left.  This allows the content offset to be used to place
                        the content in the center of the viewport when the viewport is bigger than the content.
                        -->
                        <ContentPresenter 
							x:Name="PART_Content"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                            />

                    </Border>

                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>




</ResourceDictionary>